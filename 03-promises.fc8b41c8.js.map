{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAWF,SAASC,cAAc,yBACxC,IAAIE,EAAU,KACVC,EAAgB,EAEpBL,EAAOM,iBAAiB,UAExB,SAA2BC,GACzBA,EAAEC,iBACFL,EAASM,UAAW,EAEpB,MAAMC,EAAWH,EAAEI,cAAcD,SAC3BE,EAAQF,EAASE,MAAMC,MACvBC,EAAOJ,EAASI,KAAKD,MACrBE,EAASL,EAASK,OAAOF,MAS/B,SAASG,IACP,MAAMC,EAmBV,SAAuBC,EAAUN,GAE/B,MAAMO,EAAgBC,KAAKC,SAAW,GAGhCP,EADWd,EAAOU,SACFI,KAAKD,MAE3B,IAAIS,EAAYC,OAAOX,GAASE,GAAQT,EAAgB,GAExD,OAAO,IAAImB,SAAQ,CAACC,EAAKC,KACvBC,YAAW,KAELR,EACFM,EAAI,uBAAqBP,QAAiBI,OAExCI,EAAE,sBAAoBR,QAAeI,MAAc,GAEtDV,EAAM,G,CApCOgB,CAAcvB,EAAeO,GAE7CP,GAAiB,EAEbA,EAAgBkB,OAAOR,KACzBc,cAAczB,GAEdC,EAAgB,EAChBF,EAASM,UAAW,GAGtBQ,EAAQa,MAAKC,IACXC,EAAAlC,GAASmC,OAAOC,QAAQH,EAAO,IAC9BI,OAAMC,IACPJ,EAAAlC,GAASmC,OAAOI,QAAQD,EAAM,G,CAtBlCT,YAAW,KACTX,IACAZ,EAAUkC,aAAY,KACpBtB,GAAc,GACbF,EAAK,GACPF,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst buttonEl = document.querySelector('button[type=\"submit\"]')\nlet timerId = null;\nlet promisesCount = 1;\n\nformEl.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler(e) {\n  e.preventDefault();\n  buttonEl.disabled = true;\n\n  const elements = e.currentTarget.elements\n  const delay = elements.delay.value\n  const step = elements.step.value\n  const amount = elements.amount.value\n\n  setTimeout(() => {\n    showPromises();\n    timerId = setInterval(() => {\n      showPromises();\n    }, step)\n  }, delay)\n\n  function showPromises() {\n    const promise = createPromise(promisesCount, delay);\n\n    promisesCount += 1;\n\n    if (promisesCount > Number(amount)) {\n      clearInterval(timerId);\n      // formEl.reset()\n      promisesCount = 1;\n      buttonEl.disabled = false;\n    }\n\n    promise.then(result => {\n      Notiflix.Notify.success(result);\n    }).catch(error => {\n      Notiflix.Notify.failure(error);\n    });\n  }\n}\n\nfunction createPromise(position, delay) {\n\n  const shouldResolve = Math.random() > 0.3;\n\n  const elements = formEl.elements\n  const step = elements.step.value\n\n  let delayInMs = Number(delay) + step * (promisesCount - 1);\n\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n\n      if (shouldResolve) {\n        res(`✅ Fulfilled promise ${position} in ${delayInMs}ms`)\n      } else {\n        rej(`❌ Rejected promise ${position} in ${delayInMs}ms`)\n      }\n    }, delay)\n  })\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$buttonEl","$47d4ff9957288465$var$timerId","$47d4ff9957288465$var$promisesCount","addEventListener","e","preventDefault","disabled","elements","currentTarget","delay","value","step","amount","showPromises","promise","position","shouldResolve","Math","random","delayInMs","Number","Promise","res","rej","setTimeout","$47d4ff9957288465$var$createPromise","clearInterval","then","result","$parcel$interopDefault","Notify","success","catch","error","failure","setInterval"],"version":3,"file":"03-promises.fc8b41c8.js.map"}